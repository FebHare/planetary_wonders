pw_building_particle_supercollider = {
	base_buildtime = @pw_building_buildtime
	add_to_first_building_slot = yes
	base_cap_amount = 1
	can_be_ruined = no

	category = research

	potential = {
		exists = owner
		NOT = { has_modifier = resort_colony }
		NOT = { has_modifier = slave_colony }
	}

	destroy_trigger = {
		OR = {
			has_modifier = slave_colony
			has_modifier = resort_colony
		}
	}

	allow = {
		has_major_upgraded_capital = yes
		free_district_slots > 0 # Needs a free district to occupy
		pw_can_build_planetary_wonder = yes #Check if there is space for the Wonder
	}

	planet_modifier = {
		planet_max_districts_add = -1
		planet_researchers_physics_research_produces_mult = @pw_building_research_mod
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { is_regular_empire = yes }
		}
		modifier = {
			job_researcher_add = @pw_building_specialist_jobs
			job_head_researcher_add = @pw_building_ruler_jobs
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { is_hive_empire = yes }
		}
		modifier = {
			job_brain_drone_add = @pw_building_complex_jobs
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		modifier = {
			job_calculator_add = @pw_building_complex_jobs
		}
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @pw_building_cost
		}
		upkeep = {
			energy = @pw_building_upkeep
		}
	}

	prerequisites = {
		pw_tech_particle_supercollider
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = { is_gestalt = no }
		}
		text = job_researcher_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = { is_gestalt = no }
		}
		text = job_head_researcher_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = { is_gestalt = yes }
		}
		text = job_brain_drone_effect_desc
	}

	triggered_desc = {
		trigger = {
			exists = owner
			owner = { is_gestalt = yes }
		}
		text = job_calculator_effect_desc
	}

	on_built = {
		log = "on_built for Particle Supercollider!"
		log = "Wonders built or building in this planet:"
		log = "[This.pw_planet_wonders_built]"
		log = "Wonder maximum in each planet (planet scope):"
		log = "[This.pw_planetary_wonder_limit]"
		log = "Wonder maximum in each planet (country scope):"
		log = "[Owner.pw_planetary_wonder_limit]"
	}

	on_destroy = {
		log = "on_destroy for Particle Supercollider!"
		change_variable = {which = pw_planet_wonders_built value = -1}
		log = "Wonders built or building in this planet:"
		log = "[This.pw_planet_wonders_built]"
		log = "Wonder maximum in each planet (planet scope):"
		log = "[This.pw_planetary_wonder_limit]"
		log = "Wonder maximum in each planet (country scope):"
		log = "[Owner.pw_planetary_wonder_limit]"
	}

	on_queued = {
		log = "on_queued for Particle Supercollider!"
		change_variable = {which = pw_planet_wonders_built value = +1}
		log = "Wonders built or building in this planet:"
		log = "[This.pw_planet_wonders_built]"
		log = "Wonder maximum in each planet (planet scope):"
		log = "[This.pw_planetary_wonder_limit]"
		log = "Wonder maximum in each planet (country scope):"
		log = "[Owner.pw_planetary_wonder_limit]"
	}

	on_unqueued = {
		log = "on_unqueued for Particle Supercollider!"
		change_variable = {which = pw_planet_wonders_built value = -1}
		log = "Wonders built or building in this planet:"
		log = "[This.pw_planet_wonders_built]"
		log = "Wonder maximum in each planet (planet scope):"
		log = "[This.pw_planetary_wonder_limit]"
		log = "Wonder maximum in each planet (country scope):"
		log = "[Owner.pw_planetary_wonder_limit]"
	}
}
